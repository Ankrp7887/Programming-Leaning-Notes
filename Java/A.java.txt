James Gosling -> named Oak(Java)      (1995 - By Sun Microsystems(USA)) later (2010 - Sun Microsystems is aquired by 'Oracle Corp.' for $7.4 billion)
    - java is purely object oriented
    - bytecode language - SourceCode is first converted into bytecode, in-turns this is faster than purely interpreted languages like pythonn
            other bytecode languages are C# and Kotlin


*JDK JRE JVM -->
   +-------------------------+     *To Compile & Run Java Program -->                                                                                                                          
   | JDK                     |      Exicute these in terminal of working directory..                                                                                                                         
   |       +----------+      |      javac fileName.java                                     javac app.java            Compiles in JDK compiler and .class file is generated                                                                                                                         
   |       | Compiler |      |      java fileName.class										java app.class            Get executed on JRE(Java Runtime Environment in which JVM is embedded)                                                                                                                         
   |       | Debugger |      |           SourceCode -> Compiler -> ByteCode(pPatform Independent) -> Interpreter[JVM(in JRE)] -> Machine language
   |       | Javadoc  |      |          .java                     .class                                                                                                                                      
   |       | keytool  |      |                                         
   |       | jdk/bin  |      |                                                                                                                                       
   |       +----------+      |                                                                                                                                         
   |            +            |                                                                                                                                         
   | +---------------------+ |                                                                                                                                         
   | | JRE                 | |                                                                                                                                         
   | |       +-----+       | |                                                                                                                                         
   | |       | JVM |       | |                                                                                                                                         
   | |       +-----+       | |                                                                                                                                         
   | |          +          | |                                                                                                                                         
   | | +-----------------+ | |                                                                                                                                         
   | | | Class Libraries | | |         
   | | | dir; lib/src    | | |                                                                                                                                        
   | | +-----------------+ | |                                                                                                                                         
   | +---------------------+ |                                                                                                                                         
   +-------------------------+                                                                                                                                         



**Featurs Of Java
    Plateform(OS + H/W Architechture) Independent - Compile once and execute anywhere using platform specific JVM
    Secure - No use of pointer(internal memory manipulation), Use of JVM as code monitoring system(avoids unsecured executing)
    Satically typed - variables must be declared before using(runs faster as type is not need to decided during runtime)
    Garbage collection - deallocation of dynamic allocated memory



**DATA TYPES--(Statically typed language - variables must be specify/declare type for compiler before using)
    Primitive-> stored in stack memory which is for function calls local variables
        boolean $Bool = true;                    -value can be true or false (1 bit/size depends on JVM), default is false
    
        char _my$Name = 'A';                    -value ranges from 0 to 2¹⁶(2 byte) with default hexadecimal value \u0000=0. \uffff=2¹⁶-1 // char in java supports Unicode unlike others which supports ASCII[0-127](Subset of Unicode)

        byte x;                                -value ranges from -128 to 128-1 (1 byte - 8 bits) with default value 0    
        short small_number;                    -value ranges from -2¹⁵ to 2¹⁵-1 (2 byte) with default value 0
        int Num1;                              -value ranges from -2³¹ to 2³¹-1 (4 byte) with default value 0
        long large$number = 356_457_578L;      -value ranges from -2⁶³ to 2⁶³-1 (8 byte) with default value 0l or 0L
                                                    0b1010   binary 
                                                    012      octal 
                                                    10       decimal 
                                                    0xA      hexadecimal
            Note: negative numbers are stored in the twos complement representation

        float $currency$ = 1.54f;              -takes 4 byte with default value is 0.0f or o.oF, we need to use f or F after floating constant...  +\-3.4E-38 to +/-3.4E38   ; 1.2E-2 = 1.2*10⁻²
        double Pivalue = 1.54;                 -takes 8 bytes with default value 0.00d or 0.00D                                                    +\-1.7E-308 to +/-1.7E308                                                          

    Non-Primitive-> in java all non-primitive are references to the memory allocated in heap
        String str = "this is string"               -strings are immutable, default value is null

        Wrapper class-
            Boolean b = new Boolean(True);
            Character x = new Character("A");
            Integer i = new Integer(34);
            .
            .
            .

        import java.math.BigInteger;
        BigInteger B = new BigInteger(“123456789123456789”);    -value ranges from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 (8 byte) with default value 0
            -reference variable B is created, allocate new memory in heap, put the given value there and memory location is stored in B

        array
            int[] a = {1,2,3,4,5,6};
            int a[] = new int[6];   a[0] = 1; a[1] = 2; a[2] = 3; a[3] = 4; a[4] = 5; a[5] = 6;
            int a[], b;                         // only a is array and b is integer variable
            int[] a, b;     int []a,b;          // both a and b is array variables

        class



**VARIABLES TYPE--
    Local Variables-    A variable defined within a block or method is called a local variable
            - The scope of these variables exists only within the block in which the variables are declared and destroyed after exiting from the block

    Instance Variables (Non-static Variables)-      declared in a class outside of any method or block
            - created when an object of the class is created and destroyed when the object is destroyed, and accessed only by creating objects
            - obj.variable      // accessed through object references

    Class Variables (Static Variables)-     we can only have one copy of a static variable per class
            - declared in a class outside of any method or block using the 'static' keyword with option access specifier
            - created when the program starts and destroyed when the program stops
            - ClassName.variable    // accessed through classname

        eg. class name{
                public static int a; // Class/Static variable
                public int b;        // Instance/Non-static variable
            } 



**TYPE CONVERSION--
    AutoBoxing/UnBoxing
        boolean bool = false;
        Boolean B = bool;   // AutoBoxing
        boolean bool1 = B;  // UnBoxing

    Widening/Implicit Conversion
        byte->short|->int->long->float->double  ex. char c = 'A';
               char|                                int i = c;      65 
                                                    long l = i;     65
                                                    float f = l;    65.0

    Narrowing/Explicit Conversion
        double d = 65.4;
        int i = (int)d;     65
        char c = (char)i;   A

    Non-primitive Conversion
        //Suppose the Dog class inherits Animal class then
        Animal animal = new Animal();   
        Dog dog = new Dog();
        Animal animal1 = dog;   // allowd
        Dog dog1 = animal;      // not allowed



**OPERATORS--(with precedence)
		Operators in the same line have the same precedence
		Assignment expressions in the same line group follows left to right operations
		comparisons, membership tests, and identity tests, all have the same precedence and have a left-to-right chaining


	|***	OPERATORS(with precedence)							|	***		DESCRIPTION
	
    |(expressions...), [expressions...],						|	Binding or parenthesized expression, list display,
    |x[index],              									|	Subscription, 
    |x(arguments...), x.attribute								|	call, attribute reference
	
    Can be performed on all data types except Boolean
    |++x, --x													|	pre-increament, pre-decrement 
	|*, /, %		    										|	Multiplication, division, mod(remainder) 
	|+, -														|	Addition and subtraction
    |x++, x--                                                   |   post-increament, post-decrement
	
    Can only be performed on int
    |<<, >>														|	Shifts - left{n*2ⁱ}, right{n/2ⁱ}     int x=10; x>>1; | here, n=10 i=1   // 10 = 1010 becomes 5 = 0101 // -2 = 1110 becomes -1 = 1111
    |>>>                                                        |   unsigned right shift
    |~                                                          |   Bitwise Not
	|&															|	Bitwise AND, bit-by-bit calculation.o/p. is '1' if both parallel bits are 1
	|^															|	Bitwise XOR, o/p. is '1' if both parallel bits are diffrent and '0' both parallel bits are same
	||															|	Bitwise OR

    |+x, -x, ~x													|	Positive, negative, bitwise NOT
    |!														    |	Boolean NOT
    |&&														    |	Boolean AND
    |||															|	Boolean OR
    |==, !=, <, >, <=, >=                                       |   Relational Opperators
    |=, +=, -=, *=, %= 											|	Assignment expression

	//															|- Comment
	/* 														    |- Multiline Comment 				
	    _block_													|
	*/															|



**PRINTING OUTPUT--
    General print
        System.out.print("Hello ");             -prints the strings, numbers and mixtures of both            
        System.out.println(name);              -prints the statement/s and goes for next line
                                                    "System" is class 
                                                    "out" is object
                                                    "print" is function

    Formated Strings
        System.out.printf(); or System.out.format();            -prints formated strings
            System.out.printf("%n");                            -line break(goes to nest line)
            System.out.format("bool: %b", false);                   >bool: false
            System.out.printf("%c, %C", char);                      >a, A
            System.out.format("%s, %S", "string");                  >string, STRING
            System.out.printf("int: %d", %3d", 17);                 >int: 17,  17
            System.out.format("%f, %.2f, %6.2f, %06.2f", 3.1456);   >3.1456, 3.14,   3.14, 003.14       // 6 is min characters including . to be printed
            System.out.printf("100%%");                             >100%



**Esacape sequences--
    System.out.println("List of \"Esacape sequences\"");
            \t      tab
            \b      backspace
            \n      new line
            \r      caririage return
            \f      form feed
            \'      single quote
            \"      double quote
            \\      backslash



**TAKING INPUT--
    BufferredReader
            -Faster(as not internal parcing)
            -Synchrinized(Preffered for multi-threading)

        import java.io.BufferedReader;
        import java.io.InputStreamReader;

        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));       // BufferedReader's object used to read a character or sequence of characters
        char c = reader.read();
        string c[] = reader.read();
        string c = reader.readline();
        int i = Integer.parceInt(reader.readline());


    Scanner
            -Easy
        import java.util.Scanner;               
        
        Scanner sc = new Scanner(System.in);
        String firstName = sc.nextLine();
        int age = sc.nextInt();
        float height = sc.nextFloat();
        String address = sc.next();



**CONDITIONAL STATEMENT--
	IF		if(x<5)			        NESTED IF		if(x<5)
				_block_ ;							    if (x<3){
			else if(x == 5){					            System.out.printf("x : %d", 4);
				_block_ ;                                   System.out.printf("x : %d", 5);
                _block_ ;                               }
            }
			else{
				_block_
				_block_
            }

    SWITCH	switch var:{
				case "100":
					_block_
                    break;

				case "200":
					_block_
                    break;
				
                case "300":
					_block_
                    break;
				
                default:
					_block_
            }



**LOOPING(ITERATIVE) STATEMENTS--
    FOR     for(int i; i<=0; i++){
                System.out.printf("x : %d", 4);
            }

    WHILE   while(true){
                System.out.printf("x : %d", 4);
                if i++;
                else i+=2;
            }

    DO WHILE    do{
                    System.out.printf("x : %d", 4);
                    i++;
                }while(5<4);



**JUMP STATEMENT
	break		# terminates all current and nested loops and goes out of looping statements
	continue	# terminates current loop and goes for next iteration of loop
    return      # terminates the method and returns back to the caller method, may or may not return parameters to the caller method



**ACCESS MODIFIRES/SPECIFIER--
    Access Modifiers −  keywords that can be used to control the visibility of fields, methods, and constructors in a class
        private     accessed only within the same class
        default     accessed only within the same package/class folder. Defalut access modifier for unspecified access specifier
        protected   accessed within the same package and also from outside the package with the help of the child class using inheritance
        public      accessed from anywhere

    Non-access Modifiers −  
        static
        final
        abstract
        synchronized
        volatile
        transient
        native
        strictfp



**FUNCTIONS(Modules)--
												                        argtuple - holds tuple of any no. of arguments values passed while calling the func_name ; must be used before **kargdict
												                        kargdict - holds dictionary of any no. of keyword arguments values passed while calling the func_name ; must be used as last parameter
	public static int func_name(int par1,float par2, *argtuple, **kargdict){		parameter = place holder	
		//  public static void local_func(){								            // does not allows nested methods
		//  	_block_
		//  	return
        //  }
		_block_
		return a											
    }

	x = func_name(val1, val2,...);		 		        // calling function		argument = actual value



**ENUM--    Enums restrict a variable to have one of only a few predefined values

        class FreshJuice {
            enum FreshJuiceSize{ SMALL, MEDIUM, LARGE }         // This would make sure that it would not allow anyone to order any size other than small, medium, or large.
            FreshJuiceSize size;
        }

        public class FreshJuiceTest {

            public static void main(String args[]) {
                FreshJuice juice = new FreshJuice();
                juice.size = FreshJuice.FreshJuiceSize.MEDIUM ;
                System.out.println("Size: " + juice.size);
            }
        }



**